#!/usr/bin/env node

const config = require('../config/config');
const database = require('../config/database');
const { validateConfig, formatBytes } = require('../utils/helpers');

async function init() {
  console.log('üîß Inicializando Gemini REST API...\n');

  // Validar configuraci√≥n
  console.log('üìã Validando configuraci√≥n...');
  const configErrors = validateConfig(config);

  if (configErrors.length > 0) {
    console.error('‚ùå Errores de configuraci√≥n encontrados:');
    configErrors.forEach(error => console.error(`   - ${error}`));
    console.log('\nüí° Revisa tu archivo .env y aseg√∫rate de que todas las variables est√©n configuradas correctamente.');
    process.exit(1);
  }

  console.log('‚úÖ Configuraci√≥n v√°lida');

  // Conectar a MongoDB si las sesiones est√°n habilitadas
  if (config.context.enableSessions) {
    console.log('üîå Conectando a MongoDB...');
    try {
      await database.connect();
      console.log('‚úÖ MongoDB conectado exitosamente');
    } catch (error) {
      console.error('‚ùå Error conectando a MongoDB:', error.message);
      console.log('‚ö†Ô∏è  Las sesiones estar√°n deshabilitadas hasta que se resuelva la conexi√≥n');
    }
  } else {
    console.log('‚ö†Ô∏è  Las sesiones est√°n deshabilitadas en la configuraci√≥n');
  }

  // Mostrar informaci√≥n del sistema
  console.log('\nüöÄ Informaci√≥n del sistema:');
  console.log(`   - Node.js: ${process.version}`);
  console.log(`   - Entorno: ${config.nodeEnv}`);
  console.log(`   - Puerto: ${config.port}`);
  console.log(`   - Memoria: ${formatBytes(process.memoryUsage().heapUsed)}`);

  // Mostrar configuraci√≥n de base de datos
  console.log('\nüíæ Configuraci√≥n de base de datos:');
  console.log(`   - MongoDB URI: ${config.mongodb.uri}`);
  console.log(`   - Base de datos: ${config.mongodb.dbName}`);
  console.log(`   - Sesiones habilitadas: ${config.context.enableSessions ? 'S√≠' : 'No'}`);
  if (database.isConnected) {
    const status = database.getConnectionStatus();
    console.log(`   - Estado: Conectado (${status.host}:${status.port})`);
  } else {
    console.log(`   - Estado: Desconectado`);
  }

  // Mostrar configuraci√≥n de seguridad
  console.log('\nüîí Configuraci√≥n de seguridad:');
  console.log(`   - Rate limiting: ${config.rateLimit.maxRequests} req/${Math.ceil(config.rateLimit.windowMs / 1000 / 60)} min`);
  console.log(`   - CORS origin: ${config.cors.origin}`);
  console.log(`   - Proxy trust: ${config.proxy.trust ? 'habilitado' : 'deshabilitado'}`);

  // Mostrar configuraci√≥n de contexto
  console.log('\nüí¨ Configuraci√≥n de contexto:');
  console.log(`   - M√°ximo mensajes: ${config.context.maxMessages}`);
  console.log(`   - Sesiones: ${config.context.enableSessions ? 'habilitadas' : 'deshabilitadas'}`);

  console.log('\n‚úÖ Inicializaci√≥n completada. El servidor est√° listo para arrancar.');
  console.log('üìö Documentaci√≥n disponible en: /api-docs');
  console.log('üè• Health check disponible en: /health');
  if (config.context.enableSessions) {
    console.log('üìä Estad√≠sticas de contexto en: /api/context/stats');
  }
  console.log('');
}

// Ejecutar la funci√≥n de inicializaci√≥n
init().catch(error => {
  console.error('‚ùå Error durante la inicializaci√≥n:', error);
  process.exit(1);
});
